<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://yogis.blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://yogis.blog/" rel="alternate" type="text/html" /><updated>2023-05-05T04:06:52+05:30</updated><id>https://yogis.blog/feed.xml</id><title type="html">Yogi’s Blog</title><subtitle>You discovered our little sidebar!</subtitle><entry><title type="html">A Product Perspective for Software Hackers</title><link href="https://yogis.blog/2020/10/25/product_perspective.html" rel="alternate" type="text/html" title="A Product Perspective for Software Hackers" /><published>2020-10-25T00:00:00+05:30</published><updated>2020-10-25T00:00:00+05:30</updated><id>https://yogis.blog/2020/10/25/product_perspective</id><content type="html" xml:base="https://yogis.blog/2020/10/25/product_perspective.html">&lt;p&gt;Caring deeply for, and being in love with our code is something that comes naturally to all of us who treat coding as our craft.&lt;br /&gt;
It is a natural approach for artisans to think deeply, code meticulously, and then forever and always guard our creation with the passion of a zealot.&lt;br /&gt;
This almost always works beautifully for small, well defined (or well definable) modules of &lt;em&gt;code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When I became a Lead&lt;sup id=&quot;fnref:fnl&quot;&gt;&lt;a href=&quot;#fn:fnl&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, it was natural for me to carry the same approach towards building larger &lt;em&gt;systems&lt;/em&gt;.&lt;br /&gt;
Given a problem statement, I worked to find a &lt;strong&gt;grand design&lt;/strong&gt;. It was always &lt;strong&gt;built to scale&lt;/strong&gt;. With a model so good, it would last a lifetime of changes.&lt;br /&gt;
I firmly believed that, once it was conceived, all future tradeoffs were in deference to this grand design.
Any requirement and/or change that was a deviation from this was a hack or tech-debt. Too many changes meant we were losing our way and must defer to our design deity for future course correction.&lt;/p&gt;

&lt;p&gt;There were early warning signs that this was not the best way to approach things.&lt;br /&gt;
I distinctly remember a conversation with the Head of Engineering who had a different approach to building systems.&lt;br /&gt;
To him, it was all about the &lt;em&gt;product&lt;/em&gt;, not the system. The architecture/design, so to speak, was simply a set of reasonably well thought out boxes - something that one can come up with an hour or two of pondering - not unlike what we expect to get from  &lt;em&gt;good&lt;/em&gt;&lt;sup id=&quot;fnref:fns&quot;&gt;&lt;a href=&quot;#fn:fns&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; system design interviews.&lt;br /&gt;
The initial set of boxes are enough for us to &lt;em&gt;get something out there and start our learning process&lt;/em&gt;. There is nothing permanent about this &lt;em&gt;architecture&lt;/em&gt; - it simply keeps evolving along with the product.
I didn’t dwell on the fact that he mentioned &lt;em&gt;product&lt;/em&gt; multiple times, didn’t really mention the word &lt;em&gt;system&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Years later, the grand design driven development approach (and, my developer pride) came under more direct attack.
I was part of the infrastructure team and we needed to make some core changes. I proposed a grand design whereas a coworker proposed a quicker solution that seemed &lt;em&gt;suboptimal&lt;/em&gt; to the purist in me.&lt;br /&gt;
My argument: This is a core infrastructure piece and lets take time to &lt;em&gt;build it right&lt;/em&gt;.&lt;br /&gt;
His argument: &lt;em&gt;Building it right&lt;/em&gt; will take weeks whereas his proposal would lead to immediate productivity benefits for engineers that would lead to more features for our customers which means more &lt;em&gt;dollars&lt;/em&gt; for the company &lt;strong&gt;&lt;em&gt;now&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dollars?, Sales?, Customers?&lt;/em&gt;. Doesn’t my company have an unlimited supply of those?&lt;br /&gt;
Besides, weren’t systems &lt;em&gt;supposed&lt;/em&gt; to be built &lt;em&gt;right&lt;/em&gt; ? Shouldn’t it &lt;em&gt;always&lt;/em&gt; scale from now to forever? Didn’t getting it &lt;em&gt;right&lt;/em&gt; trump getting it &lt;em&gt;early&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Well, turns out - almost never.&lt;br /&gt;
My coworker was right. I was missing the bigger picture - of what mattered to my company and how, what I was working on fit into the larger product picture.&lt;br /&gt;
It was important for the &lt;em&gt;company&lt;/em&gt; to save man hours &lt;em&gt;now&lt;/em&gt; to make a better &lt;em&gt;product&lt;/em&gt; faster.&lt;/p&gt;

&lt;p&gt;Look, I’m not saying there is no place for &lt;em&gt;good engineering&lt;/em&gt;. But engineering is all about tradeoffs, right?
These have to be a function of what the company / product needs and not your affinity to a great tech solution.
These tradeoffs can almost always be mapped to the &lt;strong&gt;real MVP&lt;/strong&gt; - &lt;strong&gt;the customer&lt;/strong&gt;.
And, when it comes to $$, customers or productivity benefits - it’s almost always more important to have them &lt;em&gt;now&lt;/em&gt; than some time from now.&lt;br /&gt;
Few people are capable of managing these tradeoffs efficiently while delighting the customer. I wish there was a handbook I could cite here, but there isn’t.&lt;/p&gt;

&lt;p&gt;It is imperative, I think, for a software developer to develop an intuition towards knowing what’s best for the customer.
You may think it doesn’t apply to you. You may be working with a brilliant Product Manager, or may be part of a core engineering team far removed from the end product.&lt;br /&gt;
I disagree. For one, you may not be in that position forever. Two, some of the most kickass engineers I know worked on core infrastructure in Azure. Not only was their knowledge about their system unparalleled, they went above and beyond themselves to work closely with us, understand our needs and ultimately use those inputs to build their &lt;em&gt;product&lt;/em&gt; better.&lt;/p&gt;

&lt;p&gt;So how does one build intuition around what’s best for the customer? Well, I’m still learning too! But here are a few things that have helped me&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be your own customer. Also known as &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=dogfooding%20%28to%20dogfood%29&quot;&gt; dogfooding &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go talk to your customers!&lt;br /&gt;
If you’re developing a consumer product, find someone that uses it and talk to them about what they love or hate about it!&lt;br /&gt;
If you’re into enterprise SaaS, get on a sales call or go out in the field with someone from Sales&lt;sup id=&quot;fnref:fnsa&quot;&gt;&lt;a href=&quot;#fn:fnsa&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Work with Designers&lt;br /&gt;
Designers, the really good ones I’ve been fortunate to work with, have this amazing ability to step into the shoes of their customers.&lt;br /&gt;
An ability to think like a designer - to visualise the final solution for your end customer - is a life skill for a developer!&lt;/li&gt;
  &lt;li&gt;At the very least, Bug your Product Manager&lt;br /&gt;
Like most of you, I love to fight with the PM. Sometimes it’s just so fulfilling to say No and &lt;em&gt;win&lt;/em&gt;.&lt;br /&gt;
But it’s also important to understand their thought process. Probe them. Empathise. Keep doing this till you can truly understand their mental model - especially how/why they prioritise what to build.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, even the most sophisticated technology is useless if it doesn’t empower, improve the life of, or bring joy to the customer.&lt;/p&gt;

&lt;p&gt;Would love to read about your experiences building products &amp;amp; systems! Please feel free to &lt;a href=&quot;mailto:yogi@theboringtech.io&quot;&gt; email &lt;/a&gt; or get in touch over &lt;a href=&quot;https://www.linkedin.com/in/yogeshnachnani/&quot;&gt; LinkedIn &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Sourav for helping me write this and providing feedback.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Footnotes&lt;/p&gt;

&lt;p&gt;PS: The title of this is somewhat inspired by &lt;a href=&quot;http://highscalability.com/blog/2013/6/6/paper-memory-barriers-a-hardware-view-for-software-hackers.html&quot;&gt; A Hardware View for Software Hackers &lt;/a&gt;. An old piece, but a must read if you haven’t already.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnl&quot;&gt;
      &lt;p&gt;Which was very early in my career, thanks to being in a high growth startup &lt;a href=&quot;#fnref:fnl&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fns&quot;&gt;
      &lt;p&gt;These are not the ones where we have to design Uber in less than 30 mins &lt;a href=&quot;#fnref:fns&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnsa&quot;&gt;
      &lt;p&gt;Btw, they’ll always have great stories to tell! &lt;a href=&quot;#fnref:fnsa&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Caring deeply for, and being in love with our code is something that comes naturally to all of us who treat coding as our craft. It is a natural approach for artisans to think deeply, code meticulously, and then forever and always guard our creation with the passion of a zealot. This almost always works beautifully for small, well defined (or well definable) modules of code.</summary></entry><entry><title type="html">Build a Dev career for the long haul</title><link href="https://yogis.blog/2020/08/01/dev_career_for_the_long_haul.html" rel="alternate" type="text/html" title="Build a Dev career for the long haul" /><published>2020-08-01T00:00:00+05:30</published><updated>2020-08-01T00:00:00+05:30</updated><id>https://yogis.blog/2020/08/01/dev_career_for_the_long_haul</id><content type="html" xml:base="https://yogis.blog/2020/08/01/dev_career_for_the_long_haul.html">&lt;p&gt;I’d like to believe I’m not old enough to hand out career advice with authority.&lt;sup id=&quot;fnref:fnh&quot;&gt;&lt;a href=&quot;#fn:fnh&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
Although, occassionaly, I am on the receiving end of innocently hurtful comments from fresh grads who say, &lt;strong&gt;“Oh, I didn’t realise you’re &lt;em&gt;more&lt;/em&gt; than 10 years older than me”&lt;/strong&gt;&lt;sup id=&quot;fnref:fns&quot;&gt;&lt;a href=&quot;#fn:fns&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I consider myself fortunate to have been around some amazing mentors.&lt;br /&gt;
At the very least, I hope this turns out to be a distillation of advice I’ve received over the years from people smarter than I am.&lt;/p&gt;

&lt;p&gt;It’s a longish read, but if you are in a hurry here’s the most important advice:&lt;br /&gt;
Hunt for a great mentor and just latch on to them. If you can’t find one, then hunt for one outside of your current workplace/environment.&lt;br /&gt;
The surest way to upskill yourself is to be &lt;a href=&quot;https://fs.blog/knowledge-project/maria-konnikova/&quot;&gt;taught by someone who is very good at what they do.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;choice-of-place-of-work&quot;&gt;[Choice of] Place of Work&lt;/h2&gt;
&lt;p&gt;A wise person once said, “A good place to work is one where the feeling of loserishness is prevelant”.&lt;br /&gt;
Simply put, you’re at the right place if you feel like a loser next to the folks &lt;em&gt;around you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;around you&lt;/em&gt; part is important. Admiring accomplished coworkers from far off won’t help you level up.&lt;br /&gt;
If possible, try to be part of a team with someone you look up to.&lt;br /&gt;
A large part of your learning will come from your immediate peers. Surround yourself with folks who are more accomplished, more hungry and more driven than you are - &lt;em&gt;you’ll feel like a loser in front of them&lt;/em&gt;, but you’ll learn the most too.&lt;/p&gt;

&lt;p&gt;I know, working closely with someone you look up to can be intimidating.&lt;br /&gt;
But apart from ridiculously fast paced learning, there is a great side effect to it too. When you carefuly observe people, you realise that everyone &lt;em&gt;is human&lt;/em&gt; and has their own shortcomings.&lt;br /&gt;
This makes it less intimidating over time and encourages you to build a thought process that is inspired by, but hopefully free from, your mentor’s biases.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;stick-to-projects&quot;&gt;Stick to Projects&lt;/h2&gt;
&lt;p&gt;Substantive learning comes from feedback. As a developer, you’ll get feedback from all quarters - peers, managers, team leads &amp;amp; perhaps even customers.&lt;/p&gt;

&lt;p&gt;Your code gives you feedback too. The code you write &amp;amp; the product it brings to life are constantly evolving.&lt;br /&gt;
That abstraction you crafted will become too brittle in a few months.&lt;br /&gt;
That API you so agonized over will no longer be used.&lt;br /&gt;
If you’re lucky - you’ll get to see your code undero major refactoring or even a rewrite!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is imperative&lt;/strong&gt; that you stick around to witness this. Only through multiple iterations does one develop an intuition about what really matters when you code.&lt;/p&gt;

&lt;p&gt;In my last company, we had taken the decision of not using any ORM.&lt;sup id=&quot;fnref:fng&quot;&gt;&lt;a href=&quot;#fn:fng&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
When a new recruit asked why, I simply said that it’s because all ORMs suck.&lt;br /&gt;
He was semi-offended at that. He mentioned he’d used &amp;lt;foo-ORM&amp;gt; in a dozen or so services in the past without encountering any issues.&lt;/p&gt;

&lt;p&gt;I tried to explain how as the code ages &amp;amp; the data model gets complex, you end up having to manage the ORM more than manage your own code.&lt;br /&gt;
Since we’re a startup, our data models would see constant flux for the foreseeable future. Hence, it was much easier to pick vanila SQL than to wrangle with an ORM&lt;/p&gt;

&lt;p&gt;What I said didn’t appeal to him very much and was evidently not convinced with our collective reasoning.&lt;br /&gt;
I gave him various scenarios where simple things like multi table queries, frequent migrations with backward compatibility etc with &amp;lt;foo-ORM&amp;gt; would become a hassle.&lt;br /&gt;
Some of these seemed to bring him round a bit, but he mentioned he still liked the &lt;em&gt;convenience&lt;/em&gt; &amp;lt;foo-ORM&amp;gt; offered.&lt;br /&gt;
On further introspection, we realised that the &lt;em&gt;convenience&lt;/em&gt; is merely that of a few saved SQL queries.&lt;/p&gt;

&lt;p&gt;During our conversation, I also found out that in his previous company, he had not been able to stick around a project for more than a quarter or two.&lt;br /&gt;
Thus, while he had used &amp;lt;foo-ORM&amp;gt; during the initial setup, he had never been in a position to have felt the pain I spoke of.&lt;br /&gt;
If he had had the opportunity to stick around long enough, he would have learnt a bit about the trade-offs that come with it.&lt;/p&gt;

&lt;p&gt;Iteration brings this wisdom. When you’re face to face with your past choices, you innately learn about how valuable they really were.&lt;/p&gt;

&lt;p&gt;Of course, there is no one universal truth - your &lt;em&gt;experiences&lt;/em&gt; will shape how you think as an engineer.&lt;br /&gt;
Perhaps requirements will change too often and you’ll end up hating PMs.&lt;br /&gt;
Perhaps you’ll hit scale sooner than expected and start taking observability &amp;amp; infrastructure choices more seriously.&lt;/p&gt;

&lt;p&gt;But at &lt;strong&gt;&lt;em&gt;at a bare minimum&lt;/em&gt;&lt;/strong&gt;, you’ll learn about at least one thing that matters in the long run and about a dozen other things that really don’t.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;take-up-a-shitty-maintenance-project&quot;&gt;Take up a Shitty Maintenance Project&lt;/h2&gt;
&lt;p&gt;Now, I know you think I’ve gone completely bonkers!&lt;br /&gt;
But, trust me, that is not career suicide!&lt;/p&gt;

&lt;p&gt;The very first project that I took up as a ‘Lead Engineer’ was a bug infested, Oh-Lord-How-Does-This-Even-Work, Step-Child-Of-7-People nightmare of a project.&lt;br /&gt;
To make my nights more fun and interesting, it was suddenly designated as a core platform project. The multi billion dollar company I worked for wanted to rely on it to provide critical alert functionality for their biggest upcoming October Sale.\&lt;/p&gt;

&lt;p&gt;There’s a saying, “Always code as if the person who ends up maintaining it is a violent psychopath”. Obviously, people who wrote this junk hadn’t heard it.&lt;br /&gt;
&lt;em&gt;I was the psychopath&lt;/em&gt;, but I couldn’t turn violent because I didn’t have time for that!
Since violence wasn’t an option, my subconscious mind chose to reconcile itself through literal nightmares instead.&lt;/p&gt;

&lt;p&gt;Despite the pressure, I can safely say that I learnt a ton from other people’s mistakes (and without the blame/guilt that comes with making them!)&lt;br /&gt;
Moreover, it helped me with some valuable skills&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The ability to read code and make sense of it&lt;/strong&gt;!&lt;/li&gt;
  &lt;li&gt;The confidence of being able to take up any code base (as shitty as can be) and be able to mould it as my own&lt;sup id=&quot;fnref:fnb&quot;&gt;&lt;a href=&quot;#fn:fnb&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both are something I pride myself on, and have come in extremely handy over the years.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;be-patient&quot;&gt;Be Patient&lt;/h2&gt;
&lt;p&gt;During one particular evaluation cycle, I really thought I deserved a promotion but I didn’t end up getting one.&lt;br /&gt;
Coincidentally, I was also changing teams at the same time. So my performance discussion happened with my to-be manager in the same room along with my ex manager.&lt;br /&gt;
I explained how I had clearly outperformed compared to what was expected, deserved the promotion and was being treated unfairly. I was outright rude.&lt;/p&gt;

&lt;p&gt;Rather than being alarmed by such hostile behaviour, my new boss uttered the single most profound advice I’ve received - &lt;strong&gt;“So?”&lt;/strong&gt;&lt;br /&gt;
The fuck did he mean by that?&lt;sup id=&quot;fnref:fnn&quot;&gt;&lt;a href=&quot;#fn:fnn&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
“Did you get to work on interesting stuff this past year?”. Yes&lt;br /&gt;
“Do you think you gave it your best and are a better engineer today than you were a year before?”. Yes&lt;br /&gt;
“Do you care about the little bit extra money you’d get if you were promoted?”. No&lt;br /&gt;
“&lt;strong&gt;So how does it matter?&lt;/strong&gt; Just suck it up and do what you’ve been doing”. Profound.&lt;/p&gt;

&lt;p&gt;And of course it didn’t matter! What matters more is that it’s been 5 years to the day and he’s still someone I go to whenever I need some honest, no bulshit advice.&lt;sup id=&quot;fnref:fnm&quot;&gt;&lt;a href=&quot;#fn:fnm&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I know - perhaps you’re skeptical. Thinking it doesn’t apply to you since you’re in a competitive, politicaly charged environment and these things &lt;em&gt;matter&lt;/em&gt;.&lt;br /&gt;
No they don’t. Trust me, I’ve been there. The above advice snapped me out of it and made me realise that how much you improve each day/week/month/year at the craft you care about &amp;amp; the relationships you build over time are what matters.&lt;/p&gt;

&lt;p&gt;One missed promotion, one missed opportunity doesn’t matter. If you’re hungry - &lt;a href=&quot;https://www.youtube.com/watch?v=cvB3Ec1dvTg&quot;&gt;you’d get round to the next one&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnh&quot;&gt;
      &lt;p&gt;People are always remarking how young I look. Surely they can’t &lt;em&gt;all&lt;/em&gt; be flattering me. Hopefully. Maybe. &lt;a href=&quot;#fnref:fnh&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fns&quot;&gt;
      &lt;p&gt;Sunny, it’s been 2 years but it still hurts :) &lt;a href=&quot;#fnref:fns&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fng&quot;&gt;
      &lt;p&gt;This was taken before I joined - and boy was I glad! &lt;a href=&quot;#fnref:fng&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnb&quot;&gt;
      &lt;p&gt;I have a blueprint now. Something I can write about some other time &lt;a href=&quot;#fnref:fnb&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnn&quot;&gt;
      &lt;p&gt;Well, I didn’t use those exact same words - it was too early to show my true colors :) &lt;a href=&quot;#fnref:fnn&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnm&quot;&gt;
      &lt;p&gt;I’m sure he doesn’t remember this one bit. He’s too busy being high on life. &lt;a href=&quot;#fnref:fnm&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">I’d like to believe I’m not old enough to hand out career advice with authority.1 Although, occassionaly, I am on the receiving end of innocently hurtful comments from fresh grads who say, “Oh, I didn’t realise you’re more than 10 years older than me”2. People are always remarking how young I look. Surely they can’t all be flattering me. Hopefully. Maybe. &amp;#8617; Sunny, it’s been 2 years but it still hurts :) &amp;#8617;</summary></entry><entry><title type="html">Tales of Tech Interviews</title><link href="https://yogis.blog/2020/05/29/tales_of_tech_interviews.html" rel="alternate" type="text/html" title="Tales of Tech Interviews" /><published>2020-05-29T00:00:00+05:30</published><updated>2020-05-29T00:00:00+05:30</updated><id>https://yogis.blog/2020/05/29/tales_of_tech_interviews</id><content type="html" xml:base="https://yogis.blog/2020/05/29/tales_of_tech_interviews.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#my-first-interview&quot; id=&quot;markdown-toc-my-first-interview&quot;&gt;My First Interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interviews-with-bigtechs&quot; id=&quot;markdown-toc-interviews-with-bigtechs&quot;&gt;Interviews with BigTechs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#product-centric-interviews&quot; id=&quot;markdown-toc-product-centric-interviews&quot;&gt;Product Centric Interviews&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#best-interview-ever&quot; id=&quot;markdown-toc-best-interview-ever&quot;&gt;Best Interview Ever&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#parting-thoughts&quot; id=&quot;markdown-toc-parting-thoughts&quot;&gt;Parting Thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;I like to believe that I’m a decent developer. There’s no &lt;em&gt;real&lt;/em&gt; proof of that, apart from the bits n pieces occasional compliments from coworkers; and the
absence of outright remarks of evident stupidity over the last ~8 years.&lt;/p&gt;

&lt;p&gt;I’ve always loved programming, and - at the same time - I’ve always  &lt;em&gt;sucked&lt;/em&gt; at competitive programming.&lt;br /&gt;
Basically, if there was a gun to my head and the only way I could get out of it was by solving a programming puzzle, I’d start making calls to the people I love.&lt;/p&gt;

&lt;p&gt;That should serve as a decent precursor for the tales to come, and how I generally fare in tech interviews.&lt;/p&gt;

&lt;h2 id=&quot;my-first-interview&quot;&gt;My First Interview&lt;/h2&gt;
&lt;p&gt;This was for a BigTech company in college. I was the crowd favourite to get through&lt;sup id=&quot;fnref:fnc&quot;&gt;&lt;a href=&quot;#fn:fnc&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The interview started. I was completely bamboozled by the question. I knew I basically had to narrow down to a data structure, but for the life of me I couldn’t settle on one!&lt;br /&gt;
Needless to say, the 2nd question never came.&lt;br /&gt;
After the interview, a friend was kind enough to point out that it was a ‘simple tournament tree’ problem. &lt;em&gt;Tournament what now?&lt;/em&gt;&lt;br /&gt;
To me, in the interview room, it was equivalent to being asked to figure out the equation for the quantum wave function in 30 minutes.&lt;/p&gt;

&lt;p&gt;Over the next 15 days, before my next interview, I inhaled the contents of &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt; Cracking The Coding Interview &lt;/a&gt;.&lt;br /&gt;
I guess it was only because of CTCI that I feel I interviewed &lt;em&gt;reasonably well&lt;/em&gt;. That, and the fact that my interviewers asked some offbeat questions and
valued first principles.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;interviews-with-bigtechs&quot;&gt;Interviews with BigTechs&lt;/h2&gt;
&lt;p&gt;Over the course of my work life, I’ve interviewed with other BigTech companies only twice - and with predictable results.&lt;br /&gt;
Here’s how one phone screen went:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Interviewer: Hey, I'm &amp;lt;name-I-can't-recollect&amp;gt;
Me: Hey there, how's it going?
Interviewer: Going good. Here's your question
Given a number 'n', Print brackets in a certain way
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It took me about 30seconds to realise that I’m not gonna get this one.&lt;br /&gt;
Don’t get me wrong, I am not a pessimist or a &lt;em&gt;giver upper&lt;/em&gt; - I just know what I don’t know.&lt;br /&gt;
Still, I tried to solve the puzzle - &lt;em&gt;thinking out loud&lt;/em&gt; all the time&lt;sup id=&quot;fnref:fna&quot;&gt;&lt;a href=&quot;#fn:fna&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, which was met by radio silence from the other end.&lt;br /&gt;
About 10 minutes in, the interviewer also realised that this wasn’t going anywhere - but we were both &lt;em&gt;duty &amp;amp; honor bound&lt;/em&gt; to see it through for the next 30 minutes.&lt;br /&gt;
Such a waste of valuable human time. I almost wanted to apologise.&lt;br /&gt;
Days later it was pointed out to me that this was a ‘simple DP problem’.&lt;/p&gt;

&lt;p&gt;A similar episode came up with another BigTech. I was asked a variation of Binary Search&lt;br /&gt;
The expectation, of course, was to &lt;em&gt;get the solution quickly&lt;/em&gt; and then &lt;em&gt;code it out (on paper)&lt;/em&gt;&lt;sup id=&quot;fnref:fnpa&quot;&gt;&lt;a href=&quot;#fn:fnpa&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; while covering all the tricky edge cases.&lt;br /&gt;
If you’re following the trend here, that - &lt;em&gt;of course&lt;/em&gt; - didn’t happen. I took like 5 minutes&lt;sup id=&quot;fnref:fnh&quot;&gt;&lt;a href=&quot;#fn:fnh&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; to get those bounds right; but of course, the interviewer gleefully pointed out all those edge cases one by one. I think this time I did end up apologising.&lt;/p&gt;

&lt;p&gt;This is not meant to evoke any sympathy towards my inability to interview well. I’ve been blessed to have a rewarding career so far and worked with some of the best people around - all outside of BigTechs.&lt;br /&gt;
This is also not about the grapes being sour - it is not a critique about the process that BigTech companies follow&lt;/p&gt;

&lt;p&gt;However, it’s notable to point out that &lt;em&gt;I don’t remember even the names of my interviewers&lt;/em&gt;, let alone remembering what they did or about their teams.&lt;br /&gt;
I did not have a very engaging conversation with them as they got right to the question.&lt;/p&gt;

&lt;p&gt;These are the learnings that I try to incorporate as an interviewer. Most people forget that an interview is a conversation first.&lt;br /&gt;
At the very least, we can try to make it a good, engaging conversation. I always start my interviews trying to have a decent conversation with interviewees rather than ‘getting down to business’.&lt;br /&gt;
A good side effect of this is that it generally helps the candidate relax.&lt;br /&gt;
Sure, they may not meet your standards in the end, but it is still worth spending some time engaging them.&lt;br /&gt;
At the very least, they’ll have a decent time and you would have done well as an ambassador for your company.&lt;br /&gt;
At best, they would remember that and write about you in a blog a few years down the line&lt;sup id=&quot;fnref:fnt&quot;&gt;&lt;a href=&quot;#fn:fnt&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;product-centric-interviews&quot;&gt;Product Centric Interviews&lt;/h2&gt;
&lt;p&gt;My interview with booking.com was my first experience of a process which was tailor made to reflect company culture and priorities.&lt;br /&gt;
The first phone screen was taken by a software developer and an employee from the customer experience team. It was a refreshing revelation!&lt;sup id=&quot;fnref:fnr&quot;&gt;&lt;a href=&quot;#fn:fnr&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. The pre-question and post-question conversation was especially enriching since I got to know more about the company and not just the tech team.&lt;/p&gt;

&lt;p&gt;Similarly, in one of their on-site rounds, I was asked a question that circled around a hotel owner’s working capital. This had nothing to do with data structures or algorithms and was the first time I actually thought of a real customer problem during an interview.&lt;br /&gt;
I don’t think I did well there and I didn’t get the offer. But I still remember &lt;em&gt;most&lt;/em&gt; of the conversation &lt;em&gt;and&lt;/em&gt; the name of my interviewer.&lt;sup id=&quot;fnref:fnf&quot;&gt;&lt;a href=&quot;#fn:fnf&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
The biggest takeaway from booking.com interview, as was pointed out by my interviewer, was “Basically we are here to solve a business problem. It’s important to us to evaluate how people approach such problems”. They didn’t pretend to be a hardcore tech company and were sincere and straightforward about what they were looking for. Despite not getting the offer, I loved the experience.&lt;/p&gt;

&lt;p&gt;One of the companies I later ended up working for had a similar interview process and I whole heartedly subscribed to it.&lt;br /&gt;
If we are not inventing new algorithms &lt;em&gt;day to day&lt;/em&gt; or even &lt;em&gt;once in a while&lt;/em&gt; then it’s important not to focus on those aspects of programming, and instead focus on what we &lt;em&gt;will end up doing day to day&lt;/em&gt; - which is solving a problem related to the company’s business.&lt;br /&gt;
Luckily, I see a lot of companies coming around to this idea.&lt;br /&gt;
There may be a lot of you reading this who may not align with this - which is fine. But I do suggest at least trying out with a company with a different hiring process - you may be enriched by the experience alone.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;best-interview-ever&quot;&gt;Best Interview Ever&lt;sup id=&quot;fnref:fnhy&quot;&gt;&lt;a href=&quot;#fn:fnhy&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;My best interview experience, in fact, wasn’t even an interview at all. It was the initial email exchange I had while interviewing for DataStax.&lt;br /&gt;
DataStax is all remote, and I loved how their recruiting process was tailor-made for their needs.&lt;br /&gt;
The first email had a set of 3 questions&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What do you know about data structure X and Y. When would you prefer X and when would you use Y&lt;/li&gt;
  &lt;li&gt;Develop an algorithm to solve a problem (which was evidently applicable to a distributed database)&lt;/li&gt;
  &lt;li&gt;Think about various optimisations to the above solution under different constraints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was blown away by the simplicity yet effectiveness of this first screening round.&lt;br /&gt;
It checked my technical skills, the stuff I kept in mind while thinking of real world implementation &amp;amp;&amp;amp; the way I presented my thoughts.&lt;br /&gt;
Even though I was really impressed by the screening &lt;em&gt;email&lt;/em&gt; itself, I was further blown away by the next task.&lt;br /&gt;
I was asked to download Cassandra and implement a certain feature in it. If I needed help, I was pointed to the IRC and mailing list. That’s it!&lt;sup id=&quot;fnref:fnit&quot;&gt;&lt;a href=&quot;#fn:fnit&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
What an incredible way to screen for &lt;em&gt;exactly&lt;/em&gt; what you value - right from the get go (and before any 1-on-1 interviews).&lt;br /&gt;
We had to cut the process short since I had an offer from another company - I didn’t want to waste my interviewer’s time, even though I would have loved to go ahead with the process.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;To me, Hiring is one of the most important processes for an organisation, yet it is often overlooked.&lt;br /&gt;
It basically determines who comes in and sits next to you to share the day to day burden of your challenging work.&lt;br /&gt;
It is specifically crucial for startups to ensure that the process tests for the skills that are relevant for day-to-day jobs, rather than aping established processes by bigger companies.&lt;/p&gt;

&lt;p&gt;Another part that generally gets missed out is iteration &amp;amp; reflection. Once a hiring process is set, it almost never gets changed.&lt;br /&gt;
A/B deployments and iteration techniques are a &lt;em&gt;given&lt;/em&gt; when it comes to building a product these days, I wonder why it is not applied to internal processes too.&lt;/p&gt;

&lt;p&gt;Also, a quick word for younger devs out there:&lt;/p&gt;

&lt;p&gt;Try not to make it your life’s mission to get to a &lt;em&gt;specific company&lt;/em&gt;.&lt;br /&gt;
There is little to no correlation between how great a career you’ll build with the company you work at.&lt;br /&gt;
Being in a BigTech won’t guarantee you’re surrounded by geniuses; and being at a startup doesn’t guarantee that you’ll morph into a rockstar or an urban legend.&lt;br /&gt;
If you’re really looking to build a solid and fulfilling career, try to focus on yourself and improving your skills.&lt;/p&gt;

&lt;p&gt;Lastly, don’t get disheartened if a few interviews go bad. Unfortunately, no matter how much we try, interviews &lt;em&gt;cannot be 100% objective&lt;/em&gt;. So a few of them going bad don’t mean much.&lt;br /&gt;
If a lot of them are going bad, that’s ok too - look for a company with an interview process that is different (&lt;em&gt;not easier&lt;/em&gt;) than the ones you’re trying out for. You may just chance upon a great fit!&lt;/p&gt;

&lt;p&gt;Would love to read about your interview tales too! Please feel free to &lt;a href=&quot;mailto:yogi@theboringtech.io&quot;&gt; email &lt;/a&gt; or get in touch over &lt;a href=&quot;https://www.linkedin.com/in/yogeshnachnani/&quot;&gt; LinkedIn &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Ravi, Sourav &amp;amp; Suman for helping me write this and providing feedback.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Footnotes:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fnc&quot;&gt;
      &lt;p&gt;Top 3 in class; teacher’s pet; geek etc etc &lt;a href=&quot;#fnref:fnc&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fna&quot;&gt;
      &lt;p&gt;That’s the advice you get at all interview websites &lt;a href=&quot;#fnref:fna&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnpa&quot;&gt;
      &lt;p&gt;I never understand why we’re made to code on paper &lt;a href=&quot;#fnref:fnpa&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnh&quot;&gt;
      &lt;p&gt;Oh, the Horror! &lt;a href=&quot;#fnref:fnh&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnt&quot;&gt;
      &lt;p&gt;See what I did there? :smirks: &lt;a href=&quot;#fnref:fnt&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnr&quot;&gt;
      &lt;p&gt;I don’t know if they still do that or not, I interviewed with them half a decade ago I think &lt;a href=&quot;#fnref:fnr&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnf&quot;&gt;
      &lt;p&gt;Fun Fact: At a later stage in life, I ended up working in payments where working capital - of my company as well as our vendors - was the &lt;em&gt;core&lt;/em&gt; problem to solve for :) &lt;a href=&quot;#fnref:fnf&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnhy&quot;&gt;
      &lt;p&gt;Excuse the hyperbole. &lt;a href=&quot;#fnref:fnhy&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnit&quot;&gt;
      &lt;p&gt;Of course, I was given the fallback to call upon the interviewer if I was stuck. They’re not monsters! &lt;a href=&quot;#fnref:fnit&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">I like to believe that I’m a decent developer. There’s no real proof of that, apart from the bits n pieces occasional compliments from coworkers; and the absence of outright remarks of evident stupidity over the last ~8 years.</summary></entry><entry><title type="html">Time is the only real currency we have</title><link href="https://yogis.blog/2020/04/16/time_is_the_real_currency.html" rel="alternate" type="text/html" title="Time is the only real currency we have" /><published>2020-04-16T00:00:00+05:30</published><updated>2020-04-16T00:00:00+05:30</updated><id>https://yogis.blog/2020/04/16/time_is_the_real_currency</id><content type="html" xml:base="https://yogis.blog/2020/04/16/time_is_the_real_currency.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a-note-on-software-engineering-stuff&quot; id=&quot;markdown-toc-a-note-on-software-engineering-stuff&quot;&gt;A Note on ‘Software Engineering Stuff’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stressed-and-struggling-for-time&quot; id=&quot;markdown-toc-stressed-and-struggling-for-time&quot;&gt;Stressed And Struggling For Time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#things-that-matter-time-savers&quot; id=&quot;markdown-toc-things-that-matter-time-savers&quot;&gt;Things That Matter (Time Savers)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#learn-to-type-fast&quot; id=&quot;markdown-toc-learn-to-type-fast&quot;&gt;Learn to type Fast&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#turbocharge-your-dev-environment&quot; id=&quot;markdown-toc-turbocharge-your-dev-environment&quot;&gt;TurboCharge your Dev Environment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#automate&quot; id=&quot;markdown-toc-automate&quot;&gt;Automate&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#know-your-infrastructure&quot; id=&quot;markdown-toc-know-your-infrastructure&quot;&gt;Know your infrastructure&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#things-that-dont-matter-time-sinks&quot; id=&quot;markdown-toc-things-that-dont-matter-time-sinks&quot;&gt;Things That Don’t Matter (Time Sinks)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#my-language-is-the-best-or-your-language-sucks&quot; id=&quot;markdown-toc-my-language-is-the-best-or-your-language-sucks&quot;&gt;My Language is the best (Or, your language sucks)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#x-doesnt-scale-lets-switch-to-y&quot; id=&quot;markdown-toc-x-doesnt-scale-lets-switch-to-y&quot;&gt;‘X’ doesn’t scale, Lets Switch to ‘Y’&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lets-use-a-thing-i-just-learnt-about-its-perfect-for-the-job&quot; id=&quot;markdown-toc-lets-use-a-thing-i-just-learnt-about-its-perfect-for-the-job&quot;&gt;Lets use a &amp;lt;thing-i-just-learnt-about&amp;gt;. Its perfect for the job&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#your-way-is-wrong&quot; id=&quot;markdown-toc-your-way-is-wrong&quot;&gt;Your way is wrong&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;“Well, that’s the thing right - Time is the only &lt;em&gt;real&lt;/em&gt; currency we have”&lt;/strong&gt;. This was the singularly brilliant summation of a long discussion the company’s founder and I had. It was one of those long walks we occasionally took in the middle of the afternoon - when the weather was still pleasant and there was a lot to talk about. The topic of discussion was Developer Productivity.&lt;br /&gt;
  We were &lt;sup id=&quot;fnref:fn0&quot;&gt;&lt;a href=&quot;#fn:fn0&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; the fastest &lt;a href=&quot;https://economictimes.indiatimes.com/small-biz/startups/newsbuzz/udaan-on-a-high-may-be-the-fastest-to-join-unicorn-club/articleshow/65650826.cms&quot;&gt; growing company in India &lt;/a&gt; and had hit a Billion Dollars in valuation with a team of about 20 engineers.&lt;br /&gt;
  Developer productivity wasn’t just an aspirational goal for us. We &lt;em&gt;needed&lt;/em&gt; to be highly productive to even &lt;em&gt;survive&lt;/em&gt; the challenges we faced on a daily basis and what lied ahead of us.&lt;br /&gt;
  I’ve always heard Time == Money, but that never really struck me as vividly as the above statement. I feel it is profound and cuts through all clutter in our head.&lt;/p&gt;

&lt;p&gt;Now that I have some more time to reflect on it, I wanted to try and best summarise what I’ve learnt on my journey so far. This is a result of ~8 years of introspection &amp;amp; observations while working in some of the &lt;a href=&quot;https://www.linkedin.com/in/yogeshnachnani/&quot;&gt; fastest growing companies on the planet &lt;/a&gt;. Hopefully you’ll take away something that helps you in daily time management.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;a-note-on-software-engineering-stuff&quot;&gt;A Note on ‘Software Engineering Stuff’&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Before we start off, I want to quickly put out a short disclaimer (I consider this important enough to give it it’s own subsection)&lt;/p&gt;

&lt;p&gt;All ‘Engineering Stuff’ - from the way we write code, to design choices, to the tools we use &lt;em&gt;come with tradeoffs&lt;/em&gt;. This is the only universal law of software development (if there ever was one).&lt;br /&gt;
There is no ‘absolute right’. If there were, you and I wouldn’t be needed much.&lt;br /&gt;
That applies for this post as well, so don’t come charging towards me with a flame thrower.&lt;/p&gt;

&lt;p&gt;But while we don’t have an ‘absolute right’, we are lucky enough to be in a field where logical conversations are generally possible and a &lt;em&gt;question of whether it is raining or not can usually be settled by stepping outside.&lt;/em&gt;&lt;sup id=&quot;fnref:fno&quot;&gt;&lt;a href=&quot;#fn:fno&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;stressed-and-struggling-for-time&quot;&gt;Stressed And Struggling For Time&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Off late, when I got talking to a whole bunch of software developers around me, the theme of burn out and &lt;em&gt;never-having-enough-time&lt;/em&gt; was surprisingly recurrent (Surprising because, it was the exact same thing I go through as well - I thought I was a special snowflake with the weight of the world boring down upon me. Alas)&lt;br /&gt;
When I reflect on it, it seems quite odd.&lt;/p&gt;

&lt;p&gt;Think about it - programming these days should be &lt;em&gt;easier&lt;/em&gt;. We are a product of decades worth of research and innovation in the field of computer science and software
engineering - but most of us work way too hard (or, at least seem to work way too hard) , spend more time than necessary in dealing with bugs and are almost always behind deadlines.&lt;/p&gt;

&lt;p&gt;Most of us are working on a significantly higher plane of &lt;a href=&quot;https://xkcd.com/676/&quot;&gt;abstraction&lt;/a&gt; - on languages such as Python, Kotlin, Go etc.&lt;br /&gt;
We almost never have to worry about memory management (unless you are one of the 8 people on the planet working on improving the garbage collector implementation)&lt;br /&gt;
The frameworks of today help us in invariably pointing the gun in the right direction, but we never seem to ‘nail the target’ once and be done with it.&lt;/p&gt;

&lt;p&gt;We are always behind our product schedule and we want things to end - but they never do.&lt;/p&gt;

&lt;p&gt;My observation, here, is that we end up spending way too much time on things that don’t matter and spending increasingly lesser time on things that do.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;things-that-matter-time-savers&quot;&gt;Things That Matter (Time Savers)&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;learn-to-type-fast&quot;&gt;Learn to type Fast&lt;/h3&gt;

&lt;p&gt;‘But software engineers spend more time thinking than typing’, I can almost sense you thinking. Agreed.&lt;br /&gt;
However, whenever you &lt;em&gt;do choose&lt;/em&gt; to grace the keyboard, your fingers must be in a position to do your bidding almost as fast as your brain thinks.&lt;br /&gt;
Typing fast is one way to easily get one of the most mundane parts about our jobs become less painful.&lt;br /&gt;
You don’t want to be the person who thinks their problem through on a piece of paper, has all the ‘structure ready in the head’ but gets bored halfway through implementing it since it’s a lot to &lt;em&gt;type out&lt;/em&gt; and it’s &lt;em&gt;taking a lot of time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;More importantly, learning to type fast will help you interact with your developer environment a lot more efficiently.&lt;br /&gt;
If you’re a Jedi, then think of the keyboard as your light saber. Be one with it and you’ll slice through anything that comes in your way.&lt;/p&gt;

&lt;p&gt;How to do it? Don’t go out looking for the best keyboard on the market. Just download &lt;a href=&quot;https://www.gnu.org/savannah-checkouts/gnu/gtypist/gtypist.html&quot;&gt;GnuTypist&lt;/a&gt; and do the touch typing course. You’ll find your basic laptop keyboard (butterfly keys or not) is capable of rocket speed with the right training.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;turbocharge-your-dev-environment&quot;&gt;TurboCharge your Dev Environment&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;If you imagine you’re a Jedi&lt;sup id=&quot;fnref:fnj&quot;&gt;&lt;a href=&quot;#fn:fnj&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, then your dev environment is the force. You can use it to move mountains by just focussing your energies and leveraging it’s powers.&lt;/p&gt;

&lt;div class=&quot;tenor-gif-embed&quot; data-postid=&quot;15798608&quot; data-share-method=&quot;host&quot; data-width=&quot;40%&quot; data-aspect-ratio=&quot;1.7978339350180503&quot;&gt;&lt;a href=&quot;https://tenor.com/view/baby-yoda-the-force-the-mandalorian-gif-15798608&quot;&gt;Baby Yoda The Force GIF&lt;/a&gt; from &lt;a href=&quot;https://tenor.com/search/babyyoda-gifs&quot;&gt;Babyyoda GIFs&lt;/a&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://tenor.com/embed.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;master-your-ide&quot;&gt;Master your IDE&lt;/h4&gt;

&lt;p&gt;I have interacted with many engineers who treat their IDEs as little more than a notepad - using it simply for code navigation, certain auto complete features and use some debugging features.&lt;br /&gt;
But modern IDEs have &lt;em&gt;so much more to offer&lt;/em&gt;.&lt;br /&gt;
Want to rename a method? Change it’s parameters? Add Default values to parameters? All this can be accomplished &lt;em&gt;via a single shortcut&lt;/em&gt;.&lt;br /&gt;
Want to Toggle Breakpoints? Jump in and out of methods while debugging? Yup, can be done in a single stroke.&lt;/p&gt;

&lt;p&gt;How to do it?&lt;br /&gt;
Every time you are presented with a task that requires you to do any of the following, spend 5 minutes to check if your IDE has a command for it&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Repeat a change multiple times (like renaming a method everywhere it is being used)&lt;/li&gt;
  &lt;li&gt;Switch tabs or windows to get from one place in code to the other (like going back to the method that you edited 10 minutes back)&lt;/li&gt;
  &lt;li&gt;Interact with an external tool (say, running your build by switching to the terminal)&lt;/li&gt;
  &lt;li&gt;Whenever you are using the mouse - your IDE will have a keyboard shortcut for it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, spend 10 minutes a day going through any available tutorial for your IDE. In a month’s time you would have put in a solid 5 hours in learning a tool you use more than 1000 hours a year&lt;sup id=&quot;fnref:fnw&quot;&gt;&lt;a href=&quot;#fn:fnw&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;master-a-terminal-based-text-editor&quot;&gt;Master a terminal based text editor&lt;/h4&gt;

&lt;p&gt;In the age of IDEs, one should not forget the power of the text editor. While most of your coding would happen on an IDE, you’d invariably end up using a terminal based text editor for some part of your work.&lt;br /&gt;
It may be while checking log files, or while writing a blog post (like this one) or logging on to a server and direct-editing files there&lt;sup id=&quot;fnref:fnd&quot;&gt;&lt;a href=&quot;#fn:fnd&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;br /&gt;
I &lt;em&gt;cannot&lt;/em&gt; imagine writing this blog on any other tool apart from my trusted vim. I have markers everywhere (adding a footnote is a keystroke away, for example), move lines from one section to the next in a blink and use the powerful search features to get around easily.&lt;br /&gt;
Besides, &lt;a href=&quot;https://pragprog.com/book/dnvim2/practical-vim-second-edition&quot;&gt; learning Vim &lt;/a&gt; helped me improve how I work on my IDE (Vim Emulation FTW!)&lt;br /&gt;
Yup, I use vim. You may use emacs. Here, go &lt;a href=&quot;https://xkcd.com/676/&quot;&gt;look at this&lt;/a&gt;, calm your nerves and come back.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;theres-a-tool-for-everything&quot;&gt;There’s a tool for everything&lt;/h4&gt;

&lt;p&gt;As I mentioned earlier, we are blessed to be at a time and place where we can leverage ideas and hard work of thousands of people who’ve worked before us.&lt;br /&gt;
Keep an eye out for things that &lt;em&gt;bother you&lt;/em&gt;, think of a probable solution to the problem and chances are that there is already a tool to help you with that.&lt;br /&gt;
If you don’t find one, &lt;a href=&quot;mailto:yogesh@theboringtech.io&quot;&gt;email me&lt;/a&gt; and I’ll be happy to help you look for one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using the mouse to copy-paste text from your terminal ? &lt;a href=&quot;https://pragprog.com/book/bhtmux2/tmux-2&quot;&gt;Use Tmux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learning something new and tired of switching back-and-forth between browser and IDE? &lt;a href=&quot;https://i3wm.org/docs/userguide.html&quot;&gt;Use i3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ever wished you could navigate the browser with the keyboard? &lt;a href=&quot;https://vimium.github.io/&quot;&gt;Use Vimium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;automate&quot;&gt;Automate&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&quot; alt=&quot; xkcd &quot; /&gt; 
Here’s an old &lt;a href=&quot;https://xkcd.com/1205/&quot;&gt;xkcd&lt;/a&gt; post suggesting the RoI of making routine tasks more efficient.&lt;br /&gt;
But here’s the kicker - since we mostly work in teams, any effort put in by &lt;em&gt;one person&lt;/em&gt; to automate routine tasks saves time for &lt;em&gt;everyone&lt;/em&gt;.
Going by the above calculation, &lt;strong&gt;if one person on a team of 10 engineers spends 3 whole days shaving off even 30 seconds on a task done by everyone only 5 times a day, we would have gotten a complete return on investment over a period of just 6 months&lt;/strong&gt;. Bring that up in your next sprint planning meet.&lt;br /&gt;
People always talk about the prodigious 5X engineer. The reality, though, is a lot more boring than that. 5X engineers, in my opinion, are those that help 5 more developers save some time in daily tasks.&lt;/p&gt;

&lt;p&gt;Just like other things, chances are that whatever you’re looking to do, there’s a tool for that. In case you’re having trouble finding one, &lt;a href=&quot;mailto:yogesh@theboringtech.io&quot;&gt;email me&lt;/a&gt; and we can find one together.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;tests&quot;&gt;Tests&lt;/h4&gt;
&lt;p&gt;Tests are, unfortunately, one of those contentious ‘Engineering’ topics that I mentioned earlier.&lt;br /&gt;
Each time you’ve written a piece of code, or reviewed a piece of code, or have spent time diagnosing a bug - if you have a test case for that method/class/API, you’ll be able to move faster (and this applies to all members for your team, mind you)&lt;br /&gt;
I am personally whole heartedly subscribed to having tests at all possible levels one can, but that’s the thing - you &lt;em&gt;don’t need to be&lt;/em&gt;. The quest here is to &lt;em&gt;save time&lt;/em&gt;, and like with all ‘Engineering Stuff’, there are tradeoffs and there are more than one ways to achieve the same goal.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;continuous-delivery&quot;&gt;Continuous Delivery&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://continuousdelivery.com/&quot;&gt; Continuous Delivery &lt;/a&gt; processes help you significantly save time avoiding routine dances before a release.&lt;br /&gt;
A word of caution, though - simply &lt;em&gt;deploying to production&lt;/em&gt; multiple times a day &lt;strong&gt;does not qualify&lt;/strong&gt; as continuous delivery.&lt;br /&gt;
There is more than enough information on the principles and practices of CD on the website (and Jez &amp;amp; Fowler’s books/lectures) that I need not go deeper into it.&lt;/p&gt;

&lt;p&gt;Just remember - the Returns of even 1 engineer’s efforts on setting up good CD practices are multiplicative.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;script-it-out&quot;&gt;Script it out&lt;/h4&gt;

&lt;p&gt;The power of scripting for low-fi tasks is invaluable.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do you routinely check for the same ‘x’ things while diagnosing an issue? Script it out&lt;/li&gt;
  &lt;li&gt;Is your company having a lot of new people joining the team and you have to explain the same steps to them, despite there being a documentation for it? &lt;a href=&quot;https://www.ansible.com/&quot;&gt; Script it out &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;know-your-infrastructure&quot;&gt;Know your infrastructure&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;When I was working as an infrastructure engineer, we routinely had &lt;strong&gt;emergency&lt;/strong&gt; emails asking us to &lt;em&gt;check if the infra is fine&lt;/em&gt;. Of course, it was always an emergency since the application was acting up and users were affected; and Of course, &lt;em&gt;it must be the infra&lt;/em&gt; which is responsible for it.&lt;br /&gt;
It’s easy to suggest,&lt;strong&gt;“It &lt;em&gt;must&lt;/em&gt; be the kernel [or the network or the database or the infrastructure]”&lt;/strong&gt;. Don’t be that person. Don’t &lt;em&gt;guess&lt;/em&gt; things - learn to diagnose things on your own.&lt;/p&gt;

&lt;p&gt;Yes, we deal with complex systems when we deploy our code today. The application code we deploy may end up running in a container which itself is running on a Host Operating System running other containers; the Host OS may itself run as a Virtual Machine which may run on another completely different Operating System sitting in a big box which hosts 10s of such machines. Our code may ‘hit an API’ which results in multiple network hops - perhaps to a machine located in an adjacent building in the same ‘Data Center’.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Every parameter&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;everything involved in that setup&lt;/em&gt;&lt;/strong&gt; - from the configuration of the OS, to the number of applications running on the host system, to a link flapping on a network cable on the core switch can result in your application behaving weird. This is the reality. While it is &lt;em&gt;almost impossible&lt;/em&gt; to know &lt;em&gt;everything&lt;/em&gt; about your infrastructure, simple tools will help you navigate a large subset of routinely faced issues.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;learn-how-things-are-deployed-to-production&quot;&gt;Learn how things are deployed to production&lt;/h4&gt;
&lt;p&gt;Figure how/where your application code runs.&lt;br /&gt;
Is it running in a container? What is the configuration of the host machine? Do you know where to look to get basic stats on CPU and IO usage (Network &amp;amp; Disk)?&lt;br /&gt;
Does traffic come to it via a load balancer? Where do you find the stats for that?&lt;br /&gt;
How is a service call to a dependency (datastore or other application) made? Does it involve a network? If yes, how is that traffic routed?&lt;/p&gt;

&lt;p&gt;Knowing this would help you isolate issues faster. This will help you apply &lt;a href=&quot;https://www.infoq.com/articles/the-box/&quot;&gt;The Box&lt;/a&gt; technique to isolate performance bottlenecks.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;learn-more-about-your-datastore&quot;&gt;Learn more about your datastore&lt;/h4&gt;

&lt;p&gt;Invariably, a significant part of your application’s job would be either reading from or writing to a myriad of data stores.&lt;br /&gt;
Basically, If you’re married to your application and love it, then the datastore is like extended family. You &lt;em&gt;must&lt;/em&gt; spend time learning more about it.&lt;/p&gt;

&lt;p&gt;A colleague once brought a replication lag of ~3hours down to under 1second on a MySQL slave by simply RTFM on various configurations of the storage engine.&lt;br /&gt;
Similarly, I’ve seen a DBA mitigate a crisis (of what everyone thought was a DDOS) by zeroing in on a query and running &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; for it.&lt;/p&gt;

&lt;p&gt;These may seem like wizardry, but it is mostly just people RTFM and spending time to learn more about the datastore their application adores.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;things-that-dont-matter-time-sinks&quot;&gt;Things That Don’t Matter (Time Sinks)&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;my-language-is-the-best-or-your-language-sucks&quot;&gt;My Language is the best (Or, your language sucks)&lt;/h3&gt;
&lt;p&gt;I once attended a conference where the founder of a hot-startup proclaimed, on stage, that they chose ‘Functional Programming’ over procedural because it is &lt;em&gt;‘Theoretically Superior’&lt;/em&gt;.&lt;br /&gt;
No, it is not. Both Church and Turing &lt;a href=&quot;https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis&quot;&gt;&lt;em&gt;proved that&lt;/em&gt;&lt;/a&gt;.&lt;br /&gt;
More importantly, any functional code you write is converted to it’s Turing equivalent - we don’t have a real machine built on church calculus.&lt;/p&gt;

&lt;p&gt;Such ideological stances are generally rooted in half baked understanding of things and compounded by the desire of someone to come off as &lt;em&gt;cool&lt;/em&gt; by knowing &lt;em&gt;more&lt;/em&gt; about esoteric/obscure or even the latest-and-greatest-shiny-new-thing.&lt;br /&gt;
Sure, [Modern] functional languages are designed to help provide &lt;em&gt;less ways to shoot oneself in the foot&lt;/em&gt; , but a well oiled C++ company&lt;sup id=&quot;fnref:fn1&quot;&gt;&lt;a href=&quot;#fn:fn1&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; would have evolved standards and patterns to write as beautiful a code than what a company working on Kotlin or Scala can; so where’s the difference?&lt;/p&gt;

&lt;p&gt;It’s all about finding what &lt;strong&gt;&lt;em&gt;works best for you&lt;/em&gt;&lt;/strong&gt;, taking early bets and seeing them through.&lt;br /&gt;
booking.com used to work on perl; cleartrip.com on lisp; udaan.com works on kotlin ; there are 1000s of successful companies working in Java/C++. It doesn’t matter.&lt;br /&gt;
What matters is how productive the organisation is - how effective developers are at making progress on the job at hand - and &lt;strong&gt;whether or not it is helping you  move forward&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;x-doesnt-scale-lets-switch-to-y&quot;&gt;‘X’ doesn’t scale, Lets Switch to ‘Y’&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;During an interview with a young dev, I enquired as to how he had ‘helped scale up &amp;lt;service x&amp;gt; and made it more performant’. He revealed how his mentor had advised him to &lt;em&gt;switch to python web server&lt;/em&gt; because &lt;em&gt;nginx is slow&lt;/em&gt;. It is indescribable&lt;sup id=&quot;fnref:fn2&quot;&gt;&lt;a href=&quot;#fn:fn2&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;  how I felt when I heard this. But after a few brief seconds of an emotional whirlwind, I empathised with him.&lt;/p&gt;

&lt;p&gt;In a similar vein, in another interview, someone described how they ‘moved away from JSON to GRPC’ because JSON was bloating their APIs too much and GRPC is more performant.&lt;/p&gt;

&lt;p&gt;I do not want to get into the merits/demerits of the choices they took (thereby, abiding with the advise that I am repeatedly giving here).&lt;br /&gt;
I do, however, want to draw your attention to some facts that apply to most of us in general:&lt;/p&gt;

&lt;p&gt;We live in a time where we can easily procure and deploy very powerful hardware. Unless you have chosen some of the &lt;em&gt;worst written&lt;/em&gt; frameworks&lt;sup id=&quot;fnref:fn3&quot;&gt;&lt;a href=&quot;#fn:fn3&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;, they &lt;em&gt;will&lt;/em&gt; ‘scale’ more than you may imagine .&lt;br /&gt;
The word &lt;em&gt;scale&lt;/em&gt; is also one of those things we notoriously are prone to brag about based on our half baked understanding of things and the desire to be ‘cool’.&lt;br /&gt;
I used to be one of those people. Back in the day, we were proudly managing a service with 10k reads-per-second (has your jaw dropped yet?) backed by a 32core 128GB MySql machine.&lt;br /&gt;
I was proud of the ‘scale’ we had managed to weather, until a dev with about 15 years of experience joined our team. He casually remarked one day that he could run 3 of his last startups with that much computing power&lt;sup id=&quot;fnref:fn4&quot;&gt;&lt;a href=&quot;#fn:fn4&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;.
I learnt a big lesson that day, that life is not a bragging contest. Also, what we &lt;em&gt;think is scale&lt;/em&gt; is probably not. We are prone to boast of our accomplishments but they are largely the result of us &lt;a href=&quot;https://www.lpalmieri.com/posts/2020-03-08-on-the-shoulders-of-the-giants/&quot;&gt;standing on the shoulders of giants&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While dealing with and handling scale is beyond the scope of this blog post, I’d leave you with this general advise&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Learn one base tool for the job and learn it really really well&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
For e.g, pick up nginx/apache web server and I almost guarantee you that these will break much much later than your entire application stack.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;RTFM &amp;amp; Benchmark&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
Benchmark every tool/technology that you are picking up. This way, you’d be more aware of the ‘limits’ of that technology.&lt;br /&gt;
How you benchmark is beyond the scope of this post (perhaps even beyond the scope of me) but a simple process can yield fairly good results.&lt;br /&gt;
Push a technology to its limits by maxing out the resources (compute / memory / network / disk IO) it is supposed to consume on a common piece of hardware (which you’ll most likely employ in production)&lt;br /&gt;
Once you max it out, RTFM and tweak it to ‘improve’ upon the limit that you just hit.&lt;br /&gt;
Repeat till you’ve either satisfied your intellectual curiosity, or realised that the solution you’ve chosen can handle 10x more of your predicted scale.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-use-a-thing-i-just-learnt-about-its-perfect-for-the-job&quot;&gt;Lets use a &amp;lt;thing-i-just-learnt-about&amp;gt;. Its perfect for the job&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;A young dev we hired was given the task of writing a simple CRUD application. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Update&lt;/code&gt; part of it, I thought, was particularly tricky, so I figured it’d be a project right up his alley and challenge his skills. He was sharp, full of energy &amp;amp; wanted to prove himself - everything you want in a young developer.&lt;br /&gt;
He also wanted to use a &amp;lt;distributed-highly-scalable-queue&amp;gt; in the application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Me: Why?

YD(Young dev): It will help us scale faster in the future and guard 
against the impedance mismatch between the core business logic and the 
rate at which clients hit the API.

Me: Sure, but do you really want to take on the complexity of having a distributed queue so soon in the life cycle of your application? It'll probably not hit the scale you mentioned for quite some time

YD: Oh there's no complexity, we can just use the one provided by 
&amp;lt;cloud-provider-x&amp;gt;

Me: But what if it looses data? Since your application deals with 
money, it is critical we don't loose a single piece of information

YD: How will a queue loose data?

Me: Any distributed system can loose data

YD: How so?

Me: Ever had a payment fail where your money was deducted but the 
order failed at the merchant page? That's a distributed system losing 
data (Not the best of examples, I know)

YD: That's different. Those are multiple different services and 
ecosystems. Queues reside within the same private cloud - probably the 
same data center. The problems of the internet don't apply here 
(Oh Snap! He got me)

Me: Yes, but there is still a network. And the queue given by 
&amp;lt;cloud-provider-x&amp;gt; is yet another piece of software written by people 
like you and me. What if it has a bug ?

YD: Oh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I encouraged him to read &lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed Systems for Fun and profit&lt;/a&gt;.&lt;br /&gt;
I also showed him how the complexity of his system lies in the design of the data model and the API and not in scale (yet).&lt;br /&gt;
A good model would also help us ‘scale well’ in the future (when we may, inevitably, have to rely on complicated distributed systems)&lt;sup id=&quot;fnref:fnc&quot;&gt;&lt;a href=&quot;#fn:fnc&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;There was yet another instance of a more seasoned developer who wanted to rewrite our order management system and use &amp;lt;the-latest-and-greatest&amp;gt; NoSQL solution offered by &amp;lt;cloud-provider-x&amp;gt;.&lt;br /&gt;
It would help us &lt;em&gt;‘be ready’&lt;/em&gt; for a potentially 100x more scale than what we’re currently facing, he claimed.
This in itself was scary (refer previous discussion), but what was scarier was that not once did he mention&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Whether or if going with NoSQL was &lt;em&gt;inherently better&lt;/em&gt; since it would provide us with a data model that will prevent future developers from shooting themselves in the foot&lt;/li&gt;
  &lt;li&gt;If all the complex business use cases could be handled within the bounds (such as row level atomicity) imposed by the NoSQL data store (the current system relied heavily on RDBMs transactions to stay ‘correct’)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My whole point is this - yes, what we do is generally complex and we live in a world where our tools are constantly evolving. We need to continuously up skill ourselves and learn more to stay relevant.&lt;br /&gt;
It is important to have the knowledge of a number of tools in our mental tool set - so we can employ any of them for the job at hand.&lt;br /&gt;
It is more important, however, to get an understanding of using the right tool &lt;em&gt;for the job&lt;/em&gt;. Our work as engineers is to &lt;strong&gt;&lt;em&gt;help the company make money by keeping customers happy&lt;/em&gt;&lt;/strong&gt;. Not to show off the &lt;em&gt;latest-thing-I-just-learnt-about&lt;/em&gt; to our peers.&lt;/p&gt;

&lt;h3 id=&quot;your-way-is-wrong&quot;&gt;Your way is wrong&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;As already mentioned, there is no ‘absolute right’ when it comes to Engineering Stuff. Similarly, there is no ‘absolute wrong’.&lt;/p&gt;

&lt;p&gt;One of my favourite software stories is unfortunately not a first hand experience. This was from early 2010s when a friend worked for a company that deployed engineers in the client’s team to augment their bandwidth. They were supporting a complicated piece of legacy software. My friend found a piece of code ‘written in an odd way’. He couldn’t intuitively grasp it and thought it could be ‘written better’&lt;sup id=&quot;fnref:fn5&quot;&gt;&lt;a href=&quot;#fn:fn5&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;. He did what most of us do - googled around and &lt;em&gt;found&lt;/em&gt; a better way.&lt;br /&gt;
He then cautiously approached the grey-bearded engineer who had originally written that code. My friend pointed to the ‘design pattern’ on the internet and suggested how code could be written better.&lt;br /&gt;
To his absolute credit, my friend inquired sincerely as to why the code was written the way it was.&lt;br /&gt;
To this, the older engineer promptly replied “Why yes, of course this does seem better. But you know the thing is, &lt;strong&gt;&lt;em&gt;when I wrote this, there was no internet&lt;/em&gt;&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;I absolutely love this story and remind myself each time I look to &lt;em&gt;blame someone for how it’s written&lt;/em&gt;.&lt;br /&gt;
If you write code for long enough, you will come across code that would want you to become the &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/9csrpv/always_code_as_if_the_guy_who_ends_up_reading/&quot;&gt;proverbial psychopath&lt;/a&gt; and shoot the original author.&lt;br /&gt;
However, it is important to be empathetic instead. It is necessary to have mutual respect towards your peers(if you don’t, you probably shouldn’t be there in the first place&lt;sup id=&quot;fnref:fn6&quot;&gt;&lt;a href=&quot;#fn:fn6&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;)&lt;br /&gt;
If possible, try to understand why things are done the way they were done.&lt;br /&gt;
If that’s not possible, it is perfectly fine to poke fun at the original author, make a note of how you’d change it instead and come back to it when you have the time. Move on&lt;sup id=&quot;fnref:fn7&quot;&gt;&lt;a href=&quot;#fn:fn7&quot; class=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;. Don’t spend time criticizing others.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;I hope you found this useful (assuming you didn’t come here just to &lt;em&gt;see how it ends&lt;/em&gt;).&lt;br /&gt;
I’d love to hear what you think. We don’t have a comment section yet, so if you want you can &lt;a href=&quot;mailto:yogesh@theboringtech.io&quot;&gt;email me&lt;/a&gt; or comment on &lt;a href=&quot;https://news.ycombinator.com/item?id=22977637&quot;&gt; HackerNews &lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fn0&quot;&gt;
      &lt;p&gt;Well, they still are - I’m just no longer part of the organisation &lt;a href=&quot;#fnref:fn0&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fno&quot;&gt;
      &lt;p&gt;From ‘The Audacity of Hope’, Barack Obama &lt;a href=&quot;#fnref:fno&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnj&quot;&gt;
      &lt;p&gt;We all have &lt;a href=&quot;#fnref:fnj&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnw&quot;&gt;
      &lt;p&gt;Well, I’ll be honest - wakatime says I clocked about 700 hours last year. But I’m sure you’re a better developer than I am :) &lt;a href=&quot;#fnref:fnw&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnd&quot;&gt;
      &lt;p&gt;We’ve all done it, admit it &lt;a href=&quot;#fnref:fnd&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn1&quot;&gt;
      &lt;p&gt;C++ is notoriously famous for giving you many ways to shoot yourself in the foot &lt;a href=&quot;#fnref:fn1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn2&quot;&gt;
      &lt;p&gt;A mixture of irate, sad, I-want-to-end-this-interview-right-now kinda feeling &lt;a href=&quot;#fnref:fn2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn3&quot;&gt;
      &lt;p&gt;In which case, what were you smoking when you chose that in the first place ? &lt;a href=&quot;#fnref:fn3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn4&quot;&gt;
      &lt;p&gt;Before the keen reader remarks ‘but were they any good?’. Yes they were - he made enough money that he was working ‘for fun’ now &lt;a href=&quot;#fnref:fn4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fnc&quot;&gt;
      &lt;p&gt;To his credit, he did go through the entire book and did a remarkably good job at iterating over his API design and data model. &lt;a href=&quot;#fnref:fnc&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn5&quot;&gt;
      &lt;p&gt;You can substitute ‘written better’ with your choice of lingo - ‘better designed’, ‘used better abstractions’ or what-have-you. &lt;a href=&quot;#fnref:fn5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn6&quot;&gt;
      &lt;p&gt;A good place to be is where the feeling of looser-ish-ness is prevalent. If you’re the smartest person in the room, you should look for better places &lt;a href=&quot;#fnref:fn6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn7&quot;&gt;
      &lt;p&gt;All of us have done this and others would do it for your code as well, because here’s the thing - there is no such thing as &lt;em&gt;perfect code&lt;/em&gt;. &lt;a href=&quot;#fnref:fn7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">“Well, that’s the thing right - Time is the only real currency we have”. This was the singularly brilliant summation of a long discussion the company’s founder and I had. It was one of those long walks we occasionally took in the middle of the afternoon - when the weather was still pleasant and there was a lot to talk about. The topic of discussion was Developer Productivity. We were 1 the fastest growing company in India and had hit a Billion Dollars in valuation with a team of about 20 engineers. Developer productivity wasn’t just an aspirational goal for us. We needed to be highly productive to even survive the challenges we faced on a daily basis and what lied ahead of us. I’ve always heard Time == Money, but that never really struck me as vividly as the above statement. I feel it is profound and cuts through all clutter in our head. Well, they still are - I’m just no longer part of the organisation &amp;#8617;</summary></entry></feed>